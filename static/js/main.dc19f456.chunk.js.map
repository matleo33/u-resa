{"version":3,"sources":["Components/Home.js","App.js","Components/Profile.js","serviceWorker.js","index.js"],"names":["Home","className","to","App","Profile","props","class","Button","primary","Card","Image","src","wrapped","ui","Content","Header","Meta","Description","extra","Icon","name","href","React","Component","Boolean","window","location","hostname","match","NoMatchPage","Root","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAYeA,EARF,kBACX,6BACE,mDACA,kBAAC,IAAD,CAAMC,UAAU,SAASC,GAAG,YAA5B,kBCMWC,MAVf,WACE,OACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,S,gFCDaG,E,kDACnB,WAAYC,GAAQ,uCACZA,G,qDAIN,OACE,6BACE,yBAAKC,MAAM,cACT,kBAAC,IAAD,CAAMJ,GAAG,KAAI,kBAACK,EAAA,EAAD,CAAQC,SAAO,GAAf,wBAEf,yBAAKF,MAAM,cACT,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,IAAI,uPAAuPC,SAAO,EAACC,IAAI,IAC9Q,kBAACJ,EAAA,EAAKK,QAAN,KACE,kBAACL,EAAA,EAAKM,OAAN,gBACA,kBAACN,EAAA,EAAKO,KAAN,KACE,0BAAMf,UAAU,QAAhB,+BAEF,kBAACQ,EAAA,EAAKQ,YAAN,kBAIF,kBAACR,EAAA,EAAKK,QAAN,CAAcI,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAMC,KAAK,eADb,8BAKF,kBAACX,EAAA,EAAKK,QAAN,CAAcI,OAAK,GACjB,uBAAGG,KAAK,sCACN,kBAACF,EAAA,EAAD,CAAMC,KAAK,aADb,cAKF,kBAACX,EAAA,EAAKK,QAAN,CAAcI,OAAK,GACjB,2BACE,kBAACC,EAAA,EAAD,CAAMC,KAAK,SADb,sB,GApCuBE,IAAMC,WCMvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVAC,EAAc,WAClB,OACE,yBAAKvB,MAAM,YACT,iDAMAwB,EAAO,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,WAAWC,UAAW7B,IACxC,kBAAC,IAAD,CAAO6B,UAAWJ,MAItBK,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDoGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc19f456.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <p>This is the HomePage</p>\r\n    <Link className=\"retour\" to=\"/Profile\"> Mon profil </Link>\r\n  </div>\r\n\r\n)\r\n\r\nexport default Home;","import React from 'react';\r\nimport Home from \"./Components/Home\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Home />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport '../CSS/profil.css';\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nexport default class Profile extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div class=\"accueilBTN\">\r\n          <Link to=\"/\"><Button primary>Retour a l'accueil</Button></Link>\r\n        </div>\r\n        <div class=\"profilCard\">\r\n          <Card>\r\n            <Image src='https://scontent-cdg2-1.xx.fbcdn.net/v/t1.0-1/p240x240/69733501_10216927294193774_169972699379007488_o.jpg?_nc_cat=102&_nc_sid=dbb9e7&_nc_ohc=wPZc_aqRDk8AX_i0PG5&_nc_ht=scontent-cdg2-1.xx&_nc_tp=6&oh=933ff4e4be69f5f743a5ba94da8254cb&oe=5EDF8E57' wrapped ui={false} />\r\n            <Card.Content>\r\n              <Card.Header>Mathieu</Card.Header>\r\n              <Card.Meta>\r\n                <span className='date'>Test lib semantic ui react</span>\r\n              </Card.Meta>\r\n              <Card.Description>\r\n                Leothaud\r\n            </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n              <p>\r\n                <Icon name='university' />\r\n                Universit√© de bordeaux\r\n            </p>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n              <a href=\"https://www.facebook.com/mleothaud\">\r\n                <Icon name='facebook' />\r\n                mleothaud\r\n            </a>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n              <a>\r\n                <Icon name='user' />\r\n                22 Friends\r\n            </a>\r\n            </Card.Content>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './CSS/index.css';\r\nimport App from './App';\r\nimport Profile from \"./Components/Profile\"\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\r\n\r\nconst NoMatchPage = () => {\r\n  return (\r\n    <div class=\"notFound\">\r\n      <h3 >404 - Not found</h3>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nconst Root = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={App}></Route>\r\n    <Route exact path=\"/Profile\" component={Profile}></Route>\r\n    <Route component={NoMatchPage}></Route>\r\n  </Switch>\r\n);\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <React.StrictMode>\r\n      <Root />\r\n    </React.StrictMode>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n"],"sourceRoot":""}